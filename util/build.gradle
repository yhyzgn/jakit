import java.text.SimpleDateFormat

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

apply from: "../ext.gradle"

def rootConfig = rootProject.ext

group rootConfig.group
version rootConfig.util.version

dependencies {
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0-rc1'
    implementation 'ch.qos.logback:logback-classic:1.4.3'
    implementation 'org.jetbrains:annotations:23.0.0'
    implementation 'org.projectlombok:lombok:1.18.24'

    api 'com.alibaba:transmittable-thread-local:2.14.0'
    api 'com.google.code.gson:gson:2.9.0'
    api 'com.google.guava:guava:31.1-jre'
    api 'org.jetbrains:annotations:23.0.0'
    api 'cn.hutool:hutool-all:5.8.8'

    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.warnings = false
    options.deprecation = true
    options.compilerArgs += ["-parameters"]
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

compileJava.dependsOn(clean)
publish.dependsOn(publishToMavenLocal)
processResources.exclude('**/rebel.xml')

// https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#packaging-executable.and-plain-archives
jar {
    enabled true
    classifier ''
    afterEvaluate {
        manifest {
            attributes 'Implementation-Version': archiveVersion
            attributes 'Built-Gradle': gradle.gradleVersion
            attributes 'Bundle-DocURL': "https://${rootConfig.url}"
            attributes 'Build-OS': System.getProperty("os.name")
            attributes 'Built-By': System.getProperty("user.name")
            attributes 'Build-Jdk': System.getProperty("java.version")
            attributes 'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
        }
    }
}

javadoc {
    description = "生成jar格式的javadoc。"
    // 只显示 protected 和 public 的类和成员
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.version = true
    options.header = project.name
    // 静默javadoc检查（比如不支持@date会报错等），jdk 8+
    options.addStringOption('Xdoclint:none', '-quiet')
    // 防止本地打开中文乱码
    options.addStringOption("charset", "UTF-8")
    // suppress warnings due to cross-module @see and @link references;
    // note that global 'api' task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    // suppress "## warnings" message
    logging.captureStandardOutput LogLevel.INFO
    // 编码一定要配置否则直接出错
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"
    // java9
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc
}

javadoc {
    afterEvaluate {
        configure(options) {
            encoding "UTF-8"
            charSet 'UTF-8'
            author true
            version true
            failOnError false
            links "https://docs.oracle.com/javase/8/docs/api"
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootConfig.group
            artifactId = rootConfig.util.artifact
            version = rootConfig.util.version
            from components.java

            pom {
                name = rootConfig.util.artifact
                description = rootConfig.util.description
                url = "https://${rootConfig.url}"
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                        comments = 'A business-friendly OSS license'
                    }
                }
                developers {
                    developer {
                        name = 'yhy'
                        email = 'yhy@gmail.com'
                        url = "https://github.com/yhyzgn/"
                    }
                }
                scm {
                    url = "https://${rootConfig.url}.git"
                    connection = "scm:git:https://${rootConfig.url}.git"
                    developerConnection = "scm:git:https://${rootConfig.url}.git"
                }
            }
        }
    }

    repositories {
        maven {
            name 'oss'
            def releasesRepoUrl = rootConfig.repository.release
            def snapshotsRepoUrl = rootConfig.repository.snapshot
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//            credentials {
//                username = ossrhUsername
//                password = ossrhPassword
//            }
        }
    }
}

//signing {
//    sign publishing.publications.mavenJava
//}