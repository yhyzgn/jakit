import java.text.SimpleDateFormat

plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id "java-library"
    id "maven-publish"
    id "signing"
}

apply from: "../ext.gradle"

def rootConfig = rootProject.ext

group rootConfig.group
version rootConfig.starterMybatis.version

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.reflections:reflections:0.10.2'
    api project(':util')
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    compileOnly 'com.baomidou:mybatis-plus-boot-starter:3.5.2'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

// publish 前先 clean
compileJava.dependsOn(clean)
publish.dependsOn(publishToMavenLocal)

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.warnings = false
    options.deprecation = true
    options.compilerArgs += ["-parameters"]
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

// https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#packaging-executable.and-plain-archives
jar {
    enabled true
    classifier ''
    afterEvaluate {
        manifest {
            attributes 'Implementation-Version': archiveVersion
            attributes 'Built-Gradle': gradle.gradleVersion
            attributes 'Bundle-DocURL': "https://${rootConfig.url}"
            attributes 'Build-OS': System.getProperty("os.name")
            attributes 'Built-By': System.getProperty("user.name")
            attributes 'Build-Jdk': System.getProperty("java.version")
            attributes 'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
        }
    }
}

javadoc {
    description = "生成jar格式的javadoc。"
    // 只显示 protected 和 public 的类和成员
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.version = true
    options.header = project.name
    // 静默javadoc检查（比如不支持@date会报错等），jdk 8+
    options.addStringOption('Xdoclint:none', '-quiet')
    // 防止本地打开中文乱码
    options.addStringOption("charset", "UTF-8")
    // suppress warnings due to cross-module @see and @link references;
    // note that global 'api' task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    // suppress "## warnings" message
    logging.captureStandardOutput LogLevel.INFO
    // 编码一定要配置否则直接出错
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"
    // java9
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootConfig.group
            artifactId = rootConfig.starterMybatis.artifact
            version = rootConfig.starterMybatis.version
            from components.java

            pom {
                name = rootConfig.starterMybatis.artifact
                description = rootConfig.starterMybatis.description
                url = "https://${rootConfig.url}"
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                        comments = 'A business-friendly OSS license'
                    }
                }
                developers {
                    developer {
                        name = 'yhy'
                        email = 'yhy@gmail.com'
                        url = "https://github.com/yhyzgn/"
                    }
                }
                scm {
                    url = "https://${rootConfig.url}.git"
                    connection = "scm:git:https://${rootConfig.url}.git"
                    developerConnection = "scm:git:https://${rootConfig.url}.git"
                }
            }
        }
    }

    repositories {
        maven {
            name "oss"
            allowInsecureProtocol true
            def releasesRepoUrl = rootConfig.repository.release
            def snapshotsRepoUrl = rootConfig.repository.snapshot
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}